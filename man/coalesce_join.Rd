% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coalesce_join.R
\name{coalesce_join}
\alias{coalesce_join}
\title{Coalescing Join for Data frames}
\usage{
coalesce_join(
  x,
  y,
  by = NULL,
  suffix = c(".x", ".y"),
  join = dplyr::full_join,
  ...
)
}
\arguments{
\item{x}{The first data frame to join.}

\item{y}{The second data frame to join.}

\item{by}{A character vector of variables to join by. See \code{?dplyr::full_join}
for details. Defaults to \code{NULL}, which uses common variables.}

\item{suffix}{A character vector of length 2, specifying the suffixes to
append to the names of common variables that are not used in \code{by}, to
make them unique. Defaults to \code{c(".x", ".y")}.}

\item{join}{The type of join to perform. Defaults to \code{dplyr::full_join}.
Other \code{dplyr} join functions like \code{left_join}, \code{right_join}, \code{inner_join}
can also be used.}

\item{...}{Additional arguments passed on to the \code{join} function.}
}
\value{
A data frame resulting from the join, with common columns coalesced
into single columns, retaining the first non-missing value.
}
\description{
This function performs a join (defaulting to \code{dplyr::full_join}) between two
data frames and then coalesces columns that have the same name but different
suffixes (e.g., '.x' and '.y') resulting from the join. This is useful for
combining data sets with identical non-key columns with varying levels of
completeness. Missing values in x are filled with matching values from y.
This function was adapted from https://alistaire.rbind.io/blog/coalescing-joins/
}
\examples{
# Create sample data frames
df1 <- data.frame(
  ID = c(1, 2, 3),
  Name = c("Priya", "Omar", "Sofia"),
  Value = c(10, 20, NA),
  City = c("Mumbai", NA, "Bogota")
)

df2 <- data.frame(
  ID = c(1, 2, 4),
  Name = c("Priya", NA, "Kenji"),
  Value = c(NA, 25, 30),
  City = c(NA, "Cairo", "Tokyo")
)

print("Data frame 1:")
print(df1)
print("Data frame 2:")
print(df2)

# Perform a coalescing full join
joined_df <- coalesce_join(df1, df2, by = "ID")
print("Coalesced Join Result:")
print(joined_df)

# Example with a left join
df3 <- data.frame(
  Key = c("A", "B"),
  Data1 = c(100, NA)
)
df4 <- data.frame(
  Key = c("A", "C"),
  Data1 = c(NA, 200),
  Data2 = c("X", "Y")
)

left_coalesced_df <- coalesce_join(df3, df4, by = "Key",
                                   join = dplyr::left_join)
print("Coalesced Left Join Result:")
print(left_coalesced_df)

}
\seealso{
Other data manipulation functions: 
\code{\link{add_completeness_score}()},
\code{\link{deduplicate_responses}()},
\code{\link{pivot_two_academic_cols}()},
\code{\link{rename_vars}()}
}
\concept{data manipulation functions}
